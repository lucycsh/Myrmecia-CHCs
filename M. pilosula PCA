
### Analysis of variation within pilosula
### First create a dataset with just the pilosula PCs in it

pilosula <- subset(mydata, Species == "pilosula")

# Test null hypothesis of no difference in average Euclidean distance between NESTS
# using ANOSIM

### first calculate a Euclidean distance matrix

lucy2.dist <- vegdist(pilosula[,6:209], 'euclidean')

lucy2.ano <- anosim(lucy2.dist, pilosula$Nest, permutations=1000)
summary(lucy2.ano)

### shows a significant difference between Nests

# Test the same null hypothesis with the PERMANOVA procedure using the adonis function
lucy2.ado <- adonis2(lucy2.dist~Nest, data=pilosula, permutations=1000)
# Display PERMANOVA results
print(lucy2.ado)

### results indicate there are significant differences between nests (6.18x more variation between nests than within them)

### principal components analysis
### do the Principal Components Analysis (using prcomp)
### this will create an error - that is because column 80 has a value of 1 for all samples (clearly the main compound for pilosula)
### we therefore need to remove this column

# Remove column 17
pilosula <- pilosula[, -17]

# Perform PCA on columns 6 to 208 (since there are now only 208 columns)
lucy2.pca <- prcomp(pilosula[,6:207], scale=TRUE)

# Check the dimensions of pilosula to see how many columns remain
dim(pilosula)

View(pilosula)
### summarise the pca

summary(lucy2.pca)

### you can plot how much variation each component explains.

fviz_eig(lucy2.pca)

### first two components explain 32.96% of the chemical variation

### now get the specific PCs into a data frame - and grouped by species

pilosulapcadata <- data.frame(lucy2.pca$x)
Nest<-pilosula$Nest


# Calculate centroids (mean values in PC space for each Nest)
pilosulacentroids<-aggregate(.~Nest, data=pilosulapcadata, mean)

# Calculate standard errors associated with those centroids
stderr<-function(x) sd(x) / sqrt(length(x))
pilosulaerrors<- aggregate(.~Nest, data=pilosulapcadata, stderr)

#combine the centroids with their respective errors
colnames(pilosulaerrors)[-1]<-paste0(colnames(pilosulaerrors)[-1],"_SE")
combined<-merge(pilosulacentroids,pilosulaerrors,by = "Nest")

##plot PC1 and PC2 with standard errors
pilosula1<-ggplot(combined,aes(x=PC1, y=PC2,color = Nest, label = Nest)) +
  geom_point (size=3) +
  geom_errorbar(aes(ymin = PC2 - PC2_SE, ymax = PC2 + PC2_SE), width=0.2) +
  geom_errorbarh(aes(xmin = PC1 - PC1_SE, xmax = PC1 + PC1_SE), height = 0.2) +
  geom_text(vjust = -1, hjust = 1) +
  labs(title = "Chemical PCA centroids for M. pilosula nests",
       x = "Chem PC1",
       y = "Chem PC2") +
  theme_minimal() +
  theme(legend.position = "none")
pilosula1


##plot PC1 and PC3 with standard errors
pilosula2 <- ggplot(combined, aes(x = PC1, y = PC3, color = Nest, label = Nest)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = PC3 - PC3_SE, ymax = PC3 + PC3_SE), width = 0.2) +
  geom_errorbarh(aes(xmin = PC1 - PC1_SE, xmax = PC1 + PC1_SE), height = 0.2) +
  geom_text(vjust = -1, hjust = 1, size = 5) +  # Increase the size of the point labels
  labs(title = "Cuticular hydrocarbon profile variation between M. pilosula nests",
       x = "CHC relative abundances PC1",
       y = "CHC relative abundances PC3") +
  theme_minimal() +
  theme(legend.position = "none",
        plot.title = element_text(size = 16),  # Increase the title font size
        axis.title.x = element_text(size = 14),  # Increase the x-axis label font size
        axis.title.y = element_text(size = 14),  # Increase the y-axis label font size
        axis.text = element_text(size = 12))  # Increase the tick mark font size

pilosula2


##plot PC2 and PC3 with standard errors
pilosula3<-ggplot(combined,aes(x=PC2, y=PC3,color = Nest, label = Nest)) +
  geom_point (size=3) +
  geom_errorbar(aes(ymin = PC3 - PC3_SE, ymax = PC3 + PC3_SE), width=0.2) +
  geom_errorbarh(aes(xmin = PC2 - PC2_SE, xmax = PC2 + PC2_SE), height = 0.2) +
  geom_text(vjust = -1, hjust = 1) +
  labs(title = "Chemical PCA centroids for M. pilosula nests",
       x = "Chem PC2",
       y = "Chem PC3") +
  theme_minimal() +
  theme(legend.position = "none")
pilosula3

# Assuming lucy2.pca has already been created and contains PCA results

# Extract PCA scores for the chemical data
chemical_scores <- data.frame(lucy2.pca$x)

# Ensure that the 'Nest' column is included for grouping later
chemical_scores$Nest <- pilosula$Nest

# Create a chemical distance matrix based on the PCA scores (using Euclidean distance)
chemical_distance_matrix <- dist(chemical_scores[, 1:2])  # Use the first two PCs for distance calculation

# Convert to a matrix for easier viewing
chemical_distance_matrix <- as.matrix(chemical_distance_matrix)

# Set row and column names based on the Nest identifiers
rownames(chemical_distance_matrix) <- chemical_scores$Sample
colnames(chemical_distance_matrix) <- chemical_scores$Sample

# View the chemical distance matrix
View(chemical_distance_matrix)

#Repeat chemical matrix for M. pilosula after following code:


# Keep only numeric columns
pilosula_numeric <- pilosula[, sapply(pilosula, is.numeric)]

# Perform PCA
pilosula1 <- prcomp(pilosula_numeric, scale. = TRUE)

# Extract the loadings for PC1 and PC3 from the PCA object
loadings <- as.data.frame(lucy2.pca$rotation[, c("PC1", "PC3")])

# Print the loadings for PC1 and PC3
print(loadings)


# Get standard deviations of the principal components
sdev2 <- lucy2.pca$sdev

# Calculate the variance explained by each PC
explained_variance <- sdev2^2

# Calculate the proportion of variance explained by each PC
proportion_variance <- explained_variance / sum(explained_variance)

# Combine PC number with explained variance into a data frame
PC_contributions <- data.frame(
  PC = paste0("PC", 1:length(proportion_variance)),
  Variance = explained_variance,
  Proportion_Variance = proportion_variance,
  Cumulative_Variance = cumsum(proportion_variance)
)

# Print the contributions of each PC
print(PC_contributions)



# Extract the loadings (influence of variables on PCs)
loadings <- as.data.frame(pilosula2$rotation)

# Check column names to ensure they are what you expect (like PC1, PC2, etc.)
print(colnames(loadings))

# Calculate the squared loadings (to see the contribution of each variable to each PC)
loadings_squared <- loadings^2

# Sum the squared loadings across all principal components
total_influence <- rowSums(loadings_squared)

# Create a table of most influential variables sorted by influence
influential_variables <- loadings[order(total_influence, decreasing = TRUE), ]

# Select the first two PCs by column names (e.g., "PC1" and "PC2")
top_variables <- influential_variables[("PC1", "PC2")]

# Calculate the absolute influence for the first two PCs
top_variables$Influence <- abs(top_variables$PC1) + abs(top_variables$PC2)

# Sort the table by the 'Influence' column in decreasing order
top_variables_sorted <- top_variables[order(top_variables$Influence, decreasing = TRUE), ]

# Print the sorted top variables
print(top_variables_sorted)



# Extract PCA results
ind <- get_pca_ind(pilosula1)  # Extract individual points
var <- get_pca_var(pilosula1)  # Extract variable vectors

# Create the PCA scatterplot
p <- ggplot(data = as.data.frame(ind$coord), aes(x = Dim.1, y = Dim.2)) +
  geom_point(aes(color = pilosula$Nest), size = 3) +  # Plot individual points
  theme_minimal()

fviz_pca_biplot(pilosula1, 
                # Individuals
                geom.ind = "point",
                axes = c(1, 2),
                fill.ind = pilosula$Nest, col.ind = "black",
                pointshape = 21, pointsize = 2,
                palette = "mpg",
                Centroids = TRUE,#Adds ellipses 
                # Variables
                alpha.var ="contrib", col.var = "contrib",
                cols = "black",
                repel = TRUE,
                select.var = list(contrib = 10),
                legend.title = list(fill = "Nest", color = "Contrib",
                                    alpha = "Contrib")
)

library()

# Extract PCA results
ind <- get_pca_ind(pilosula1)  # Extract individual points
var <- get_pca_var(pilosula1)  # Extract variable vectors

# Create a data frame of PCA coordinates and nest information
pca_data <- as.data.frame(ind$coord)
pca_data$Nest <- pilosula$Nest

# Calculate centroids for each Nest group
centroids <- pca_data %>%
  group_by(Nest) %>%
  summarise(Dim1_centroid = mean(Dim.1),
            Dim3_centroid = mean(Dim.3))

# Install the ggrepel package if you haven't already
install.packages("ggrepel")

# Load the package
library(ggrepel)
library(ggplot2)

# Create the PCA scatterplot with centroids and variable vectors
p <- ggplot(pca_data, aes(x = Dim.1, y = Dim.3, color = Nest)) +
  geom_point(size = 3) +  # Plot individual points
  geom_point(data = centroids, aes(x = Dim1_centroid, y = Dim3_centroid, fill = Nest),
             shape = 21, color = "black", size = 5) +  # Add centroids
  geom_segment(data = as.data.frame(var$coord), 
               aes(x = 0, y = 0, xend = Dim.1, yend = Dim.3),
               arrow = arrow(length = unit(0.3, "cm")), color = "black") +  # Add variable arrows
  geom_text_repel(data = as.data.frame(var$coord), 
                  aes(x = Dim.1, y = Dim.3, label = rownames(var$coord)),
                  size = 5, color = "black") +  # Add variable labels
  theme_minimal()

# Display the plot
print(p)
'
'
RStudio.Version()
